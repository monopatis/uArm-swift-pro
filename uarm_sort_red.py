#!/usr/bin/env python

from PIL import Image, ImageTk
import tkinter 
import datetime
import cv2
import os
import numpy as np
import sys
from time import sleep
import time
from uf.wrapper.swift_api import SwiftAPI

global cam_x
global cam_y

# Array Koordinaten Screen to uArm
cam_y = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7.65, 8.3, 8.95, 9.6, 10.25, 10.9, 11.55, 12.2, 12.85, 13.5, 14.15, 14.8, 15.45, 16.1, 16.75, 17.4, 18.05, 18.7, 19.35, 20, 20.65, 21.3, 21.95, 22.6, 23.25, 23.9, 24.55, 25.2, 25.85, 26.5, 27.15, 27.8, 28.45, 29.1, 29.75, 30.4, 31.05, 31.7, 32.35, 33, 33.65, 34.3, 34.95, 35.6, 36.25, 36.9, 37.55, 38.2, 38.85, 39.5, 40.15, 40.8, 41.45, 42.1, 42.75, 43.4, 44.05, 44.7, 45.35, 46, 46.65, 47.3, 47.95, 48.6, 49.25, 49.9, 50.55, 51.2, 51.85, 52.5, 53.15, 53.8, 54.45, 55.1, 55.75, 56.4, 57.05, 57.7, 58.35, 59, 59.65, 60.3, 60.95, 61.6, 62.25, 62.9, 63.55, 64.2, 64.85, 65.5, 66.15, 66.8, 67.45, 68.1, 68.75, 69.4, 70.05, 70.7, 71.35, 72, 72.65, 73.3, 73.95, 74.6, 75.25, 75.9, 76.55, 77.2, 77.85, 78.5, 79.15, 79.8, 80.45, 81.1, 81.75, 82.4, 83.05, 83.7, 84.35, 85, 85.65, 86.3, 86.95, 87.6, 88.25, 88.9, 89.55, 90.2, 90.85, 91.5, 92.15, 92.8, 93.45, 94.1, 94.75, 95.4, 96.05, 96.7, 97.35, 98, 98.65, 99.3, 99.95, 100.6, 101.25, 101.9, 102.55, 103.2, 103.85, 104.5, 105.15, 105.8, 106.45, 107.1, 107.75, 108.4, 109.05, 109.7, 110.35, 111, 111.65, 112.3, 112.95, 113.6, 114.25, 114.9, 115.55, 116.2, 116.85, 117.5, 118.15, 118.8, 119.45, 120.1, 120.75, 121.4, 122.05, 122.7, 123.35, 124, 124.65, 125.3, 125.95, 126.6, 127.25, 127.9, 128.55, 129.2, 129.85, 130.5, 131.15, 131.8, 132.45, 133.1, 133.75, 134.4, 135.05, 135.7, 136.35, 137, 137.65, 138.3, 138.95, 139.6, 140.25, 140.9, 141.55, 142.2, 142.85, 143.5, 144.15, 144.8, 145.45, 146.1, 146.75, 147.4, 148.05, 148.7, 149.35, 150, 150.65, 151.3, 151.95, 152.6, 153.25, 153.9, 154.55, 155.2, 155.85, 156.5, 157.15, 157.8, 158.45, 159.1, 159.75, 160.4, 161.05, 161.7, 162.35, 163, 163.65, 164.3, 164.95, 165.6, 166.25, 166.9, 167.55, 168.2, 168.85, 169.5, 170.15, 170.8, 171.45, 172.1, 172.75, 173.4, 174.05, 174.7, 175.35, 176, 176.65, 177.3, 177.95, 178.6, 179.25, 179.9, 180.55, 181.2, 181.85, 182.5, 183.15, 183.8, 184.45, 185.1, 185.75, 186.4, 187.05, 187.7, 188.35, 189, 189.65, 190.3, 190.95, 191.6, 192.25, 192.9, 193.55, 194.2, 194.85, 195.5, 196.15, 196.8, 197.45, 198.1, 198.75, 199.4, 200.05, 200.7, 201.35, 202, 202.65, 203.3, 203.95, 204.6, 205.25, 205.9, 206.55, 207.2, 207.85, 208.5, 209.15, 209.8, 210.45, 211.1, 211.75, 212.4, 213.05, 213.7, 214.35, 215, 215.65, 216.3, 216.95, 217.6, 218.25, 218.9, 219.55, 220.2, 220.85, 221.5, 222.15, 222.8, 223.45, 224.1, 224.75, 225.4, 226.05, 226.7, 227.35, 228, 228.65, 229.3, 229.95, 230.6, 231.25, 231.9, 232.55, 233.2, 233.85, 234.5, 235.15, 235.8, 236.45, 237.1, 237.75, 238.4, 239.05, 239.7, 240.35, 241, 241.65, 242.3, 242.95, 243.6, 244.25, 244.9, 245.55, 246.2, 246.85, 247.5, 248.15, 248.8, 249.45, 250.1, 250.75, 251.4, 252.05, 252.7, 253.35, 254, 254.65, 255.3, 255.95, 256.6, 257.25, 257.9, 258.55, 259.2, 259.85, 260.5, 261.15, 261.8, 262.45, 263.1, 263.75, 264.4, 265.05, 265.7, 266.35, 267, 267.65, 268.3, 268.95, 269.6, 270.25, 270.9, 271.55, 272.2, 272.85, 273.5, 274.15, 274.8, 275.45, 276.1, 276.75, 277.4, 278.05, 278.7, 279.35, 280, 280, 280]
cam_x = [-190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -189.382, -188.764, -188.146, -187.528, -186.91, -186.292, -185.674, -185.056, -184.438, -183.82, -183.202, -182.584, -181.966, -181.348, -180.73, -180.112, -179.494, -178.876, -178.258, -177.64, -177.022, -176.404, -175.786, -175.168, -174.55, -173.932, -173.314, -172.696, -172.078, -171.46, -170.842, -170.224, -169.606, -168.988, -168.37, -167.752, -167.134, -166.516, -165.898, -165.28, -164.662, -164.044, -163.426, -162.808, -162.19, -161.572, -160.954, -160.336, -159.718, -159.1, -158.482, -157.864, -157.246, -156.628, -156.01, -155.392, -154.774, -154.156, -153.538, -152.92, -152.302, -151.684, -151.066, -150.448, -149.83, -149.212, -148.594, -147.976, -147.358, -146.74, -146.122, -145.504, -144.886, -144.268, -143.65, -143.032, -142.414, -141.796, -141.178, -140.56, -139.942, -139.324, -138.706, -138.088, -137.47, -136.852, -136.234, -135.616, -134.998, -134.38, -133.762, -133.144, -132.526, -131.908, -131.29, -130.672, -130.054, -129.436, -128.818, -128.2, -127.582, -126.964, -126.346, -125.728, -125.11, -124.492, -123.874, -123.256, -122.638, -122.02, -121.402, -120.784, -120.166, -119.548, -118.93, -118.312, -117.694, -117.076, -116.458, -115.84, -115.222, -114.604, -113.986, -113.368, -112.75, -112.132, -111.514, -110.896, -110.278, -109.66, -109.042, -108.424, -107.806, -107.188, -106.57, -105.952, -105.334, -104.716, -104.098, -103.48, -102.862, -102.244, -101.626, -101.008, -100.39, -99.772, -99.154, -98.536, -97.918, -97.3, -96.682, -96.064, -95.446, -94.828, -94.21, -93.592, -92.974, -92.356, -91.738, -91.12, -90.502, -89.884, -89.266, -88.648, -88.03, -87.412, -86.794, -86.176, -85.558, -84.94, -84.322, -83.704, -83.086, -82.468, -81.85, -81.232, -80.614, -79.996, -79.378, -78.76, -78.142, -77.524, -76.906, -76.288, -75.67, -75.052, -74.434, -73.816, -73.198, -72.58, -71.962, -71.344, -70.726, -70.108, -69.49, -68.872, -68.254, -67.636, -67.018, -66.4, -65.782, -65.164, -64.546, -63.928, -63.31, -62.692, -62.074, -61.456, -60.838, -60.22, -59.602, -58.984, -58.366, -57.748, -57.13, -56.512, -55.894, -55.276, -54.658, -54.04, -53.422, -52.804, -52.186, -51.568, -50.95, -50.332, -49.714, -49.096, -48.478, -47.86, -47.242, -46.624, -46.006, -45.388, -44.77, -44.152, -43.534, -42.916, -42.298, -41.68, -41.062, -40.444, -39.826, -39.208, -38.59, -37.972, -37.354, -36.736, -36.118, -35.5, -34.882, -34.264, -33.646, -33.028, -32.41, -31.792, -31.174, -30.556, -29.938, -29.32, -28.702, -28.084, -27.466, -26.848, -26.23, -25.612, -24.994, -24.376, -23.758, -23.14, -22.522, -21.904, -21.286, -20.668, -20.05, -19.432, -18.814, -18.196, -17.578, -16.96, -16.342, -15.724, -15.106, -14.488, -13.87, -13.252, -12.634, -12.016, -11.398, -10.78, -10.162, -9.544, -8.926, -8.308, -7.69, -7.072, -6.454, -5.836, -5.218, -4.6, -3.982, -3.364, -2.746, -2.128, -1.51, -0.892, -0.274, 0.344, 0.962, 1.58, 2.198, 2.816, 3.434, 4.052, 4.67, 5.288, 5.906, 6.524, 7.142, 7.76, 8.378, 8.996, 9.614, 10.232, 10.85, 11.468, 12.086, 12.704, 13.322, 13.94, 14.558, 15.176, 15.794, 16.412, 17.03, 17.648, 18.266, 18.884, 19.502, 20.12, 20.738, 21.356, 21.974, 22.592, 23.21, 23.828, 24.446, 25.064, 25.682, 26.3, 26.918, 27.536, 28.154, 28.772, 29.39, 30.008, 30.626, 31.244, 31.862, 32.48, 33.098, 33.716, 34.334, 34.952, 35.57, 36.188, 36.806, 37.424, 38.042, 38.66, 39.278, 39.896, 40.514, 41.132, 41.75, 42.368, 42.986, 43.604, 44.222, 44.84, 45.458, 46.076, 46.694, 47.312, 47.93, 48.548, 49.166, 49.784, 50.402, 51.02, 51.638, 52.256, 52.874, 53.492, 54.11, 54.728, 55.346, 55.964, 56.582, 57.2, 57.818, 58.436, 59.054, 59.672, 60.29, 60.908, 61.526, 62.144, 62.762, 63.38, 63.998, 64.616, 65.234, 65.852, 66.47, 67.088, 67.706, 68.324, 68.942, 69.56, 70.178, 70.796, 71.414, 72.032, 72.65, 73.268, 73.886, 74.504, 75.122, 75.74, 76.358, 76.976, 77.594, 78.212, 78.83, 79.448, 80.066, 80.684, 81.302, 81.92, 82.538, 83.156, 83.774, 84.392, 85.01, 85.628, 86.246, 86.864, 87.482, 88.1, 88.718, 89.336, 89.954, 90.572, 91.19, 91.808, 92.426, 93.044, 93.662, 94.28, 94.898, 95.516, 96.134, 96.752, 97.37, 97.988, 98.606, 99.224, 99.842, 100.46, 101.078, 101.696, 102.314, 102.932, 103.55, 104.168, 104.786, 105.404, 106.022, 106.64, 107.258, 107.876, 108.494, 109.112, 109.73, 110.348, 110.966, 111.584, 112.202, 112.82, 113.438, 114.056, 114.674, 115.292, 115.91, 116.528, 117.146, 117.764, 118.382, 119, 119.618, 120.236, 120.854, 121.472, 122.09, 122.708, 123.326, 123.944, 124.562, 125.18, 125.798, 126.416, 127.034, 127.652, 128.27, 128.888, 129.506, 130.124, 130.742, 131.36, 131.978, 132.596, 133.214, 133.832, 134.45, 135.068, 135.686, 136.304, 136.922, 137.54, 138.158, 138.776, 139.394, 140.012, 140.63, 141.248, 141.866, 142.484, 143.102, 143.72, 144.338, 144.956, 145.574, 146.192, 146.81, 147.428, 148.046, 148.664, 149.282, 149.9, 150.518, 151.136, 151.754, 152.372, 152.99, 153.608, 154.226, 154.844, 155.462, 156.08, 156.698, 157.316, 157.934, 158.552, 159.17, 159.788, 160.406, 161.024, 161.642, 162.26, 162.878, 163.496, 164.114, 164.732, 165.35, 165.968, 166.586, 167.204, 167.822, 168.44, 169.058, 169.676, 170.294, 170.912, 171.53, 172.148, 172.766, 173.384, 174.002, 174.62, 175.238, 175.856, 176.474, 177.092, 177.71, 178.328, 178.946, 179.564, 180.182, 180.8, 181.418, 182.036, 182.654, 183.272, 183.89, 184.508, 185.126, 185.744, 186.362, 187.362, 188.362, 189.362, 190.362, 191.362]

   
def ustart():
    global swift
    sys.path.append(os.path.join(os.path.dirname(__file__), '../..'))
    swift = SwiftAPI() # {'hwid': 'USB VID:PID=2341:0042'}
    sleep(2)
    swift.set_position(150, 0, 80, speed = 20000, wait = True) 
    sleep(2)
 

def destructor():
     print("[INFO] Beendet...")
     startposi()
     main.destroy()
     cap.release() 
     cv2.destroyAllWindows() 

def sorti():
    for i in range(len(x_liste)):
        swift.set_position(x_liste[i], y_liste[i], 80, speed = 20000, relative=False, wait = True)
        swift.set_position(z = 80, speed = 20000, relative=False, wait = True)
        r = 80
        while r > -5:
            r = r - 1
            swift.set_position(z = r, speed = 2000, relative=False, wait = True)
            if swift.get_limit_switch():
                swift.set_pump(True)
                break

        swift.set_position(z = 80, speed = 20000, relative=False, wait = True)
        swift.set_position(-5, speed = 20000, relative=True, wait = True) 
        # ablegen
        swift.set_position(0, 280, 140, speed = 20000, relative=False, wait = True) 
        swift.set_pump(False)
        swift.flush_cmd()
        
    swift.set_position(150, 0, 80, speed = 20000, wait = True) 
    

             
def video_loop():
     global x_liste
     global y_liste
     x_liste = []
     y_liste = []
     ok, img = cap.read() 
     
     if ok:  
        # Farbe rot
        colorLow = np.array([0,57,139])
        colorHigh = np.array([255,255,255])
         
        imgHSV = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
        mask = cv2.inRange(imgHSV, colorLow, colorHigh)
        
        maskOpen = cv2.morphologyEx(mask,cv2.MORPH_OPEN,kernelOpen)
        maskClose = cv2.morphologyEx(maskOpen,cv2.MORPH_CLOSE,kernelClose)
        maskFinal = maskClose
        mix,conts,h = cv2.findContours(maskFinal.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)
    
        cv2.drawContours(img,conts,-1,(255,0,0),3)
          
        image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) 
        
        current_image = Image.fromarray(image)              # convert image for PIL
        imgtk = ImageTk.PhotoImage(image=current_image)     # convert image for tkinter
        panel.imgtk = imgtk                                 # anchor imgtk so it does not be deleted by garbage-collector
        panel.config(image=imgtk)                           # show the image
       
        for i in range(len(conts)):
            x,y,w,h = cv2.boundingRect(conts[i])
            cv2.rectangle(img,(x,y),(x + w,y + h),(0,0,255), 2)
            y_mitte = y + (h / 2)
            x_mitte = x + (w / 2)
            uarm_x = cam_y[int(y_mitte)]  # convert Screen - uArm
            uarm_y = cam_x[int(x_mitte)]
            x_liste.append(uarm_x)
            y_liste.append(uarm_y)
        
     main.after(30, video_loop)  


def startposi():
    swift.set_position(150, 0, 80, speed = 20000, wait = True)
    swift.flush_cmd()


ustart()

cap = cv2.VideoCapture(0) 
cap.set(cv2.CAP_PROP_SETTINGS,0)

kernelOpen = np.ones((5,5))
kernelClose = np.ones((20,20))

main = tkinter.Tk() 
fr = tkinter.Frame(main, height=550, width=750,bg="#FFFFFF", bd=10)
fr.grid(row=0, column =10, padx = 10, pady = 10)
main.title("... uArm sorts red")   
main.protocol('WM_DELETE_WINDOW', destructor)
panel = tkinter.Label(main)
panel.grid(row=0, column =10, padx = 1, pady = 1)

mBar = tkinter.Menu(main)
mSpei = tkinter.Menu(mBar)


mSpei.add_command(label="Startposition", command = startposi)
mSpei.add_separator()

mSpei.add_command(label="Beenden", command=destructor)
mBar.add_cascade(label="System", menu=mSpei)
main["menu"] = mBar


btntest = tkinter.Button(main,width='80', text="Start", command = sorti)
btntest.grid(row=48, column=10 , padx = 10, pady = 10)

video_loop()
print("[INFO] Programmstart...")
main.mainloop()
